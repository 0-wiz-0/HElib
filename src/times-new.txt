*** matmul1D: m=15709, p=2, r=1, L=10, g=27, dim=0
m = 15709, p = 2, phi(m) = 15004
  ord(p)=22
  generator 5 has order (== Z_m^*) of 682

 Multiplying 1D with MatMulBase+CDRT cache...
  AAAA_matmul1D_cache: 13.1388 / 1 = 13.1388   [Test_matmul1D.cpp:342]
  AAAA_matmul1D_apply: 7.58895 / 1 = 7.58895   [Test_matmul1D.cpp:351]
  AutIterBrk2digits: 1.61685 / 26 = 0.0621865   [Ctxt.cpp:1444]
  AutoIterator_build: 0.065364 / 1 = 0.065364   [matmul1D.cpp:230]
  AutoIterator_next: 6.9599 / 681 = 0.0102201   [matmul1D.cpp:251]
  AutomorphVecIterator: 2.69805 / 26 = 0.103771   [Ctxt.cpp:1422]
  BluesteinFFT: 1.98812 / 896 = 0.00221888   [bluestein.cpp:65]
  DoubleCRT: 0.615401 / 50 = 0.012308   [DoubleCRT.cpp:378]
  FFT: 1.63489 / 666 = 0.00245479   [CModulus.cpp:248]
  FFT: 1.63504 / 128 = 0.0127737   [DoubleCRT.cpp:48]
  FFT_remainder: 0.12891 / 666 = 0.000193559   [CModulus.cpp:253]
  KS_loop: 2.99361 / 2043 = 0.0014653   [Ctxt.cpp:114]
  KS_loop_1: 0.529096 / 2043 = 0.00025898   [Ctxt.cpp:121]
  KS_loop_2: 0.412519 / 2043 = 0.000201918   [Ctxt.cpp:125]
  KS_loop_3: 0.570091 / 2043 = 0.000279046   [Ctxt.cpp:130]
  KS_loop_4: 0.192621 / 2043 = 9.42834e-05   [Ctxt.cpp:134]
  addCtxt: 0.145344 / 682 = 0.000213114   [Ctxt.cpp:612]
  addPart: 0.864108 / 4767 = 0.000181269   [Ctxt.cpp:523]
  addPrimes: 1.60821 / 78 = 0.020618   [DoubleCRT.cpp:318]
  addPrimes_5: 1.61193 / 78 = 0.0206658   [DoubleCRT.cpp:301]
  breakIntoDigits: 1.61685 / 26 = 0.0621863   [DoubleCRT.cpp:287]
  build: 0.065363 / 1 = 0.065363   [Ctxt.cpp:1525]
  do_mul: 1.51633 / 5450 = 0.000278226   [DoubleCRT.cpp:160]
  iFFT: 0.802728 / 230 = 0.00349012   [CModulus.cpp:278]
  iFFT_division: 0.27835 / 230 = 0.00121022   [CModulus.cpp:332]
  modDownToSet: 1.07933 / 25 = 0.0431734   [Ctxt.cpp:257]
  multByConstant: 0.4177 / 682 = 0.000612463   [Ctxt.cpp:843]
  multiply: 7.58895 / 1 = 7.58895   [matmul1D.cpp:209]
  next_1: 0.501758 / 681 = 0.000736796   [Ctxt.cpp:1468]
  next_2: 0.692715 / 681 = 0.0010172   [Ctxt.cpp:1477]
  next_3: 3.03668 / 681 = 0.00445916   [Ctxt.cpp:1484]
  randomize: 1.12869 / 2043 = 0.000552467   [DoubleCRT.cpp:891]
  randomize_stream: 0.623373 / 606772 = 1.02736e-06   [DoubleCRT.cpp:918]
  toPoly: 1.00343 / 128 = 0.00783927   [DoubleCRT.cpp:588]
  toPoly_CRT: 0.177708 / 128 = 0.00138834   [DoubleCRT.cpp:641]
  toPoly_FFT: 0.815358 / 128 = 0.00636998   [DoubleCRT.cpp:621]
  val2index: 0.000767 / 681 = 1.12628e-06   [matmul1D.cpp:33]
Nice!!


---------------

*** matmul1D: m=5461, p=2, r=1, L=10, g=12, dim=0
m = 5461, p = 2, phi(m) = 5292
  ord(p)=14
  generator 3 has order (== Z_m^*) of 126
  generator 509 has order (== Z_m^*) of 3

 Multiplying 1D with MatMulBase+CDRT cache...
  AAAA_matmul1D_cache: 1.09152 / 1 = 1.09152   [Test_matmul1D.cpp:342]
  AAAA_matmul1D_apply: 0.435272 / 1 = 0.435272   [Test_matmul1D.cpp:351]
  AutIterBrk2digits: 0.082067 / 3 = 0.0273557   [Ctxt.cpp:1444]
  AutoIterator_build: 0.028335 / 1 = 0.028335   [matmul1D.cpp:230]
  AutoIterator_next: 0.372979 / 125 = 0.00298383   [matmul1D.cpp:251]
  AutomorphVecIterator: 0.119546 / 3 = 0.0398487   [Ctxt.cpp:1422]
  BluesteinFFT: 0.091223 / 91 = 0.00100245   [bluestein.cpp:65]
  DoubleCRT: 0.021662 / 4 = 0.0054155   [DoubleCRT.cpp:378]
  FFT: 0.073814 / 68 = 0.0010855   [CModulus.cpp:248]
  FFT: 0.073833 / 13 = 0.00567946   [DoubleCRT.cpp:48]
  FFT_remainder: 0.004591 / 68 = 6.75147e-05   [CModulus.cpp:253]
  KS_loop: 0.204272 / 375 = 0.000544725   [Ctxt.cpp:114]
  KS_loop_1: 0.034533 / 375 = 9.2088e-05   [Ctxt.cpp:121]
  KS_loop_2: 0.028168 / 375 = 7.51147e-05   [Ctxt.cpp:125]
  KS_loop_3: 0.041818 / 375 = 0.000111515   [Ctxt.cpp:130]
  KS_loop_4: 0.012821 / 375 = 3.41893e-05   [Ctxt.cpp:134]
  addCtxt: 0.00933 / 126 = 7.40476e-05   [Ctxt.cpp:612]
  addPart: 0.057082 / 875 = 6.52366e-05   [Ctxt.cpp:523]
  addPrimes: 0.081544 / 9 = 0.00906044   [DoubleCRT.cpp:318]
  addPrimes_5: 0.081706 / 9 = 0.00907844   [DoubleCRT.cpp:301]
  breakIntoDigits: 0.082067 / 3 = 0.0273557   [DoubleCRT.cpp:287]
  build: 0.028334 / 1 = 0.028334   [Ctxt.cpp:1525]
  do_mul: 0.100663 / 1002 = 0.000100462   [DoubleCRT.cpp:160]
  iFFT: 0.036218 / 23 = 0.0015747   [CModulus.cpp:278]
  iFFT_division: 0.012406 / 23 = 0.000539391   [CModulus.cpp:332]
  modDownToSet: 0.037238 / 2 = 0.018619   [Ctxt.cpp:257]
  multByConstant: 0.024401 / 126 = 0.000193659   [Ctxt.cpp:843]
  multiply: 0.435271 / 1 = 0.435271   [matmul1D.cpp:209]
  next_1: 0.03031 / 125 = 0.00024248   [Ctxt.cpp:1468]
  next_2: 0.037033 / 125 = 0.000296264   [Ctxt.cpp:1477]
  next_3: 0.208056 / 125 = 0.00166445   [Ctxt.cpp:1484]
  randomize: 0.075934 / 375 = 0.000202491   [DoubleCRT.cpp:891]
  randomize_stream: 0.042236 / 41250 = 1.0239e-06   [DoubleCRT.cpp:918]
  toPoly: 0.043649 / 13 = 0.00335762   [DoubleCRT.cpp:588]
  toPoly_CRT: 0.006473 / 13 = 0.000497923   [DoubleCRT.cpp:641]
  toPoly_FFT: 0.036656 / 13 = 0.00281969   [DoubleCRT.cpp:621]
  val2index: 4e-05 / 125 = 3.2e-07   [matmul1D.cpp:33]
Nice!!


---------------

*** matmul1D: m=20801, p=2, r=1, L=10, g=5, dim=0
m = 20801, p = 2, phi(m) = 18000
  ord(p)=60
  generator 3 has order (== Z_m^*) of 30
  generator 95 has order (== Z_m^*) of 10

 Multiplying 1D with MatMulBase+CDRT cache...
  AAAA_matmul1D_cache: 1.00269 / 1 = 1.00269   [Test_matmul1D.cpp:342]
  AAAA_matmul1D_apply: 0.390045 / 1 = 0.390045   [Test_matmul1D.cpp:351]
  AutIterBrk2digits: 0.12343 / 1 = 0.12343   [Ctxt.cpp:1444]
  AutoIterator_build: 0.123726 / 1 = 0.123726   [matmul1D.cpp:230]
  AutoIterator_next: 0.239352 / 29 = 0.00825352   [matmul1D.cpp:251]
  AutomorphVecIterator: 0.12372 / 1 = 0.12372   [Ctxt.cpp:1422]
  BluesteinFFT: 0.095615 / 21 = 0.0045531   [bluestein.cpp:65]
  FFT: 0.077371 / 16 = 0.00483569   [CModulus.cpp:248]
  FFT: 0.077371 / 3 = 0.0257903   [DoubleCRT.cpp:48]
  FFT_remainder: 0.003622 / 16 = 0.000226375   [CModulus.cpp:253]
  KS_loop: 0.166709 / 87 = 0.0019162   [Ctxt.cpp:114]
  KS_loop_1: 0.026967 / 87 = 0.000309966   [Ctxt.cpp:121]
  KS_loop_2: 0.021883 / 87 = 0.000251529   [Ctxt.cpp:125]
  KS_loop_3: 0.040071 / 87 = 0.000460586   [Ctxt.cpp:130]
  KS_loop_4: 0.009846 / 87 = 0.000113172   [Ctxt.cpp:134]
  addCtxt: 0.00742 / 30 = 0.000247333   [Ctxt.cpp:612]
  addPart: 0.046104 / 203 = 0.000227113   [Ctxt.cpp:523]
  addPrimes: 0.122614 / 3 = 0.0408713   [DoubleCRT.cpp:318]
  addPrimes_5: 0.122783 / 3 = 0.0409277   [DoubleCRT.cpp:301]
  breakIntoDigits: 0.123429 / 1 = 0.123429   [DoubleCRT.cpp:287]
  build: 0.123725 / 1 = 0.123725   [Ctxt.cpp:1525]
  do_mul: 0.08594 / 234 = 0.000367265   [DoubleCRT.cpp:160]
  iFFT: 0.038105 / 5 = 0.007621   [CModulus.cpp:278]
  iFFT_division: 0.014179 / 5 = 0.0028358   [CModulus.cpp:332]
  multByConstant: 0.01892 / 30 = 0.000630667   [Ctxt.cpp:843]
  multiply: 0.390044 / 1 = 0.390044   [matmul1D.cpp:209]
  next_1: 0.027252 / 29 = 0.000939724   [Ctxt.cpp:1468]
  next_2: 0.038409 / 29 = 0.00132445   [Ctxt.cpp:1477]
  next_3: 0.168903 / 29 = 0.00582424   [Ctxt.cpp:1484]
  randomize: 0.059638 / 87 = 0.000685494   [DoubleCRT.cpp:891]
  randomize_stream: 0.032818 / 32009 = 1.02527e-06   [DoubleCRT.cpp:918]
  toPoly: 0.044379 / 3 = 0.014793   [DoubleCRT.cpp:588]
  toPoly_CRT: 0.005255 / 3 = 0.00175167   [DoubleCRT.cpp:641]
  toPoly_FFT: 0.038433 / 3 = 0.012811   [DoubleCRT.cpp:621]
  val2index: 4e-06 / 29 = 1.37931e-07   [matmul1D.cpp:33]
Nice!!


---------------

*** matmul1D: m=10013, p=2, r=1, L=10, g=3, dim=0
m = 10013, p = 2, phi(m) = 8640
  ord(p)=360
  generator 3 has order (!= Z_m^*) of 12
  generator 2262 has order (== Z_m^*) of 2
  T = [1 2262 3 6786 9 332 27 996 81 2988 243 8964 729 6866 2187 572 6561 1716 9670 5148 8984 5431 6926 6280 ]

 Multiplying 1D with MatMulBase+CDRT cache...
  AAAA_matmul1D_cache: 0.361402 / 1 = 0.361402   [Test_matmul1D.cpp:342]
  AAAA_matmul1D_apply: 0.156891 / 1 = 0.156891   [Test_matmul1D.cpp:351]
  AutIterBrk2digits: 0.059178 / 1 = 0.059178   [Ctxt.cpp:1444]
  AutoIterator_build: 0.059319 / 1 = 0.059319   [matmul1D.cpp:230]
  AutomorphVecIterator: 0.059313 / 1 = 0.059313   [Ctxt.cpp:1422]
  BluesteinFFT: 0.045369 / 21 = 0.00216043   [bluestein.cpp:65]
  FFT: 0.036909 / 16 = 0.00230681   [CModulus.cpp:248]
  FFT: 0.036911 / 3 = 0.0123037   [DoubleCRT.cpp:48]
  FFT_remainder: 0.001813 / 16 = 0.000113312   [CModulus.cpp:253]
  KS_loop: 0.063488 / 66 = 0.000961939   [Ctxt.cpp:114]
  KS_loop_1: 0.009838 / 66 = 0.000149061   [Ctxt.cpp:121]
  KS_loop_2: 0.011116 / 66 = 0.000168424   [Ctxt.cpp:125]
  KS_loop_3: 0.014628 / 66 = 0.000221636   [Ctxt.cpp:130]
  KS_loop_4: 0.0036 / 66 = 5.45455e-05   [Ctxt.cpp:134]
  addCtxt: 0.002786 / 23 = 0.00012113   [Ctxt.cpp:612]
  addPart: 0.020198 / 154 = 0.000131156   [Ctxt.cpp:523]
  addPrimes: 0.058786 / 3 = 0.0195953   [DoubleCRT.cpp:318]
  addPrimes_5: 0.058873 / 3 = 0.0196243   [DoubleCRT.cpp:301]
  breakIntoDigits: 0.059177 / 1 = 0.059177   [DoubleCRT.cpp:287]
  build: 0.059317 / 1 = 0.059317   [Ctxt.cpp:1525]
  do_mul: 0.031394 / 178 = 0.000176371   [DoubleCRT.cpp:160]
  iFFT: 0.01824 / 5 = 0.003648   [CModulus.cpp:278]
  iFFT_division: 0.006826 / 5 = 0.0013652   [CModulus.cpp:332]
  multByConstant: 0.006948 / 23 = 0.000302087   [Ctxt.cpp:843]
  multiply: 0.156889 / 1 = 0.156889   [matmul1D.cpp:209]
  next_1: 0.009828 / 22 = 0.000446727   [Ctxt.cpp:1468]
  next_2: 0.011348 / 22 = 0.000515818   [Ctxt.cpp:1477]
  next_3: 0.064459 / 22 = 0.00292995   [Ctxt.cpp:1484]
  randomize: 0.021141 / 66 = 0.000320318   [DoubleCRT.cpp:891]
  randomize_stream: 0.011824 / 11453 = 1.03239e-06   [DoubleCRT.cpp:918]
  toPoly: 0.021453 / 3 = 0.007151   [DoubleCRT.cpp:588]
  toPoly_CRT: 0.002617 / 3 = 0.000872333   [DoubleCRT.cpp:641]
  toPoly_FFT: 0.018399 / 3 = 0.006133   [DoubleCRT.cpp:621]
  val2index: 5e-06 / 22 = 2.27273e-07   [matmul1D.cpp:33]
Nice!!

